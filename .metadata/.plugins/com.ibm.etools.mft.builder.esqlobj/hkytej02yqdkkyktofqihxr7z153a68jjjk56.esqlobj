CREATE COMPUTE MODULE CGRREC_XML_MSG_IN_FailureLog
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.XMLNSC.errorDetails.messageFlowName = MessageFlowLabel;
		SET OutputRoot.XMLNSC.errorDetails.messageBody = Environment.variables.filename;
		SET OutputRoot.XMLNSC.errorDetails.exceptionList = InputExceptionList;

		DECLARE charPosCommonRefStart INTEGER POSITION('<CommonRefNumber>' IN Environment.Variables.InXML);
		DECLARE charPosCommonRefEnd INTEGER POSITION('</CommonRefNumber>' IN Environment.Variables.InXML);
		DECLARE commonRefLength INTEGER charPosCommonRefEnd - charPosCommonRefStart;
		SET Environment.variables.RefNo = SUBSTRING(Environment.Variables.InXML FROM charPosCommonRefStart+17 FOR commonRefLength);

		SET OutputRoot.XMLNSC.errorDetails.msRefNo = SUBSTRING(Environment.variables.RefNo BEFORE '<');
		SET OutputRoot.XMLNSC.errorDetails.eventName = 'Consumption';
		SET OutputRoot.XMLNSC.errorDetails.portCode = Environment.Variables.PortDtls[1].PortCode;

		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputRoot.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputRoot.Text;
		ELSEIF (EXISTS(OutputRoot.Error[])) THEN
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = InputRoot.Error.Number;
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = InputRoot.Error.Desc;
		ELSE
			SET OutputRoot.XMLNSC.errorDetails.ErrorCode = '-1';
			SET OutputRoot.XMLNSC.errorDetails.ErrorText = 'ESB Error Ocurred';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;