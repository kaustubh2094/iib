BROKER SCHEMA OUTBOUND_TXT_XML


CREATE COMPUTE MODULE CARTING_CARTRQ_XML_GetFormatType
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.ediStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDISTARTTIME;');
		SET Environment.variables.txnID = InputRoot.XMLNSC.PCS.Common_Ref;
		DECLARE MessageName CHARACTER InputRoot.XMLNSC.PCS.Action_In;
		DECLARE request BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';
		SET request = REPLACE(request, ReplaceCarriageReturn);
		SET Environment.variables.request = CAST(request AS CHARACTER CCSID 1208);
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
		CALL EDI_GetFormatTypeByRefAndMsg(Environment.variables.txnID,MessageName,Environment.Variables.Result[],Environment.Variables.Result56[]);

		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_GetFormatTypeByRefAndMsg( IN TransactionID CHARACTER,IN MessageName CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 2
	EXTERNAL NAME "dbo.EDI_GetFormatTypeByRefAndMsg";

END MODULE;

CREATE COMPUTE MODULE CARTING_CARTRQ_XML_XMLCreation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL EDI_XGetCARTRQ(Environment.variables.txnID,Environment.Variables.result1[],Environment.Variables.result2[],Environment.Variables.result3[],Environment.Variables.result4[],Environment.Variables.result5[]);
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		DECLARE i,j,s,m INTEGER 1;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.DocumentType = Environment.Variables.result1[1].DocumentType;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.DocumentName = Environment.Variables.result1[1].DocumentName;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.DocumentNumber = Environment.Variables.result1[1].DocumentNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.CommonRefNumber = Environment.Variables.result1[1].CommonRefNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.MessageType = Environment.Variables.result1[1].MessageType;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentReference.SenderID = Environment.Variables.result1[1].SenderID;

		SET s = CARDINALITY(Environment.Variables.result2[]);
		WHILE i <=s DO
			SET OutputRoot.XMLNSC.ReqForCarting.DocumentHeader.DocumentExchangeDetails.ReceivingPartyDetails[i].ReceivingParty = Environment.Variables.result2[i].ReceivingParty;
			SET i =i+1;
		END WHILE;

		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.RecordType = Environment.Variables.result1[1].RecordType;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.VCNNumber = Environment.Variables.result1[1].VCNNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.IMONumber = Environment.Variables.result1[1].IMONumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.CallSign = Environment.Variables.result1[1].CallSign;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.VoyageNumber = Environment.Variables.result1[1].VoyageNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.VesselName = Environment.Variables.result1[1].VesselName;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.SACode = Environment.Variables.result1[1].SACode;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.CHACode = Environment.Variables.result1[1].CHACode;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.CartingDate = Environment.Variables.result1[1].CartingDate;

		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.NoOf20FtCont = Environment.Variables.result1[1].NoOf20FtCont;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.NoOf40FtCont = Environment.Variables.result1[1].NoOf40FtCont;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.NoOfOthCont = Environment.Variables.result1[1].NoOfOthCont;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.SBNumber = Environment.Variables.result1[1].SBNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.SBDate = Environment.Variables.result1[1].SBDate;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.PortOfDestination = Environment.Variables.result1[1].PortOfDestination;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.TruckNumber = Environment.Variables.result1[1].TruckNumber;
		SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CartingPermissionHeader.CartingUpToDate = Environment.Variables.result1[1].CartingUpToDate;

		SET m = CARDINALITY(Environment.Variables.result4[]);
		WHILE j<=m DO
			SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CargoDetails.Cargo[j].RecordNumber = Environment.Variables.result4[j].RecordNumber;
			SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CargoDetails.Cargo[j].TypeOfCargo = Environment.Variables.result4[j].TypeOfCargo;
			SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CargoDetails.Cargo[j].CargoDesc = Environment.Variables.result4[j].CargoDesc;
			SET OutputRoot.XMLNSC.ReqForCarting.DocumentDetails.CargoDetails.Cargo[j].Weight = Environment.Variables.result4[j].Weight;
			SET j=j+1;
		END WHILE;

		SET OutputRoot.XMLNSC.ReqForCarting.DocumentSummary.IssuedDateTime = Environment.Variables.result5[1].IssuedDateTime;
		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_XGetCARTRQ( IN TransactionID CHARACTER) LANGUAGE DATABASE DYNAMIC RESULT SETS 5 EXTERNAL NAME "dbo.EDI_XGetCARTRQ";

END MODULE;


CREATE COMPUTE MODULE CARTING_CARTRQ_XML_Failure
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE errorCode CHARACTER;
		DECLARE errorText CHARACTER;
		IF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.RecoverableException.ParserException.ParserException.Text;
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Number;
			SET errorText = InputExceptionList.RecoverableException.DatabaseException.DatabaseException.DatabaseException.Insert[3].Text;
		ELSEIF (Environment.variables.noResultbyProcedure = TRUE) THEN
			SET errorCode = 'ERR01';
			SET errorText = 'No resultset obtained from EDI_GetFormatTypeByRefAndMsg procedure';
		ELSEIF (EXISTS(InputExceptionList.RecoverableException.RecoverableException.RecoverableException[])) THEN
			SET errorCode = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Number;
			SET errorText = InputExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
		ELSE
			SET errorCode = 'ERR01';
			SET errorText = 'ESB exception occurred';
		END IF;

		DECLARE currTime CHARACTER CURRENT_TIMESTAMP;
		SET currTime = REPLACE(currTime,'TIMESTAMP ','');
		SET currTime = SUBSTRING(currTime BEFORE '.');
		SET currTime = SUBSTRING(currTime FROM 2);
		SET OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree.Executiongroup = ExecutionGroupLabel;
		DECLARE userExcepRef REFERENCE TO OutputRoot.XMLNSC.MQI_ERRORS.UserExceptionTree;
		SET userExcepRef.Brokername = BrokerName;
		SET userExcepRef.FlowName = MessageFlowLabel;
		SET userExcepRef.ErrorCode = errorCode;
		SET userExcepRef.ErrorText = errorText;


		SET OutputRoot.XMLNSC.MQI_ERRORS.TIMESTAMP = currTime;

		SET OutputRoot.XMLNSC.MQI_ERRORS.MsgBody = Environment.variables.request;

		SET OutputRoot.XMLNSC.MQI_ERRORS.ExceptionList = InputExceptionList;

		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBError(outputChar);
		COMMIT;

		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_InsIIBError(IN errorXML CHARACTER) LANGUAGE DATABASE DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBError";

END MODULE;

CREATE COMPUTE MODULE CARTING_CARTRQ_XML_FileCreation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
			IF (CONTAINS(Environment.Variables.result2.SFTP_PATH,'http')) THEN
				
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC);

			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
--			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);
			SET OutputRoot.BLOB.BLOB = CAST(OutputRoot.XMLNSC AS BLOB CCSID 1208);
				
--			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
----			DECLARE ReplaceCarriageReturn BLOB X'0d0a';
--			
--			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
--			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
----			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);	
--			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
--			DECLARE stringOut BLOB;
--			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);
--		
--			SET OutputRoot.BLOB.BLOB = stringOut;
			SET Environment.APICALL = TRUE;
--			SET reqcnpapi = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 1208);
			CREATE FIELD OutputRoot.XMLNSC.data;
			SET OutputRoot.XMLNSC.data.payload = Environment.Variables.charData;
			SET OutputRoot.XMLNSC.data.url = Environment.Variables.result2.SFTP_PATH;
			SET OutputRoot.XMLNSC.data.comref = Environment.Variables.result1.CommonRefNumber;
			SET OutputRoot.XMLNSC.data.siteid = Environment.Variables.result1.SenderID;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
	        ELSEIF (EXISTS(InputRoot.XMLNSC[])) THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC);

			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);
			SET OutputRoot.BLOB.BLOB = CAST(OutputRoot.XMLNSC AS BLOB CCSID 1208);
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.result2[1].SFTP_PATH;
			SET OutputLocalEnvironment.Destination.File.Name = 'CARTRQ_'||Environment.variables.txnID||'.xml';
			SET Environment.variables.fileName = OutputLocalEnvironment.Destination.File.Name;
			SET Environment.variables.fileDirectory = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;

		END IF;

		RETURN TRUE;	


	END;
	CREATE PROCEDURE xmlBeautify( IN unformattedXML CHARACTER) RETURNS CHARACTER LANGUAGE JAVA
	EXTERNAL NAME "com.portall.xmlBeautify.XmlBeautifier.prettyFormat";

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE CARTING_CARTRQ_XML_AuditLog
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
			SET Environment.variables.ediEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDIENDTIME;');
			DECLARE ediEndTime CHARACTER CAST(Environment.variables.ediEndTime[1].EDIENDTIME AS CHARACTER);
			SET ediEndTime = REPLACE(ediEndTime,'TIMESTAMP ','');
			SET ediEndTime = SUBSTRING(ediEndTime FROM 2 FOR 23);

			DECLARE ediStartTime CHARACTER CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
			DECLARE mailStartTime CHARACTER CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
			DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
			DECLARE dbStartTime CHARACTER CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
			DECLARE dbEndTime CHARACTER CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
			DECLARE SMSStartTime CHARACTER CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

			SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
			SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);

			SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
			SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);

			SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
			SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);

			SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
			SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);

			SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
			SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);

			SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
			SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);

			DECLARE messageSender CHARACTER;
			DECLARE emailId CHARACTER;
			DECLARE mobileNumber CHARACTER;
			IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
				SET messageSender = Environment.Variables.result1[1].SenderID;
				SET emailId = Environment.Variables.result2[1].Email_id;
				SET mobileNumber = Environment.Variables.result2[1].Mobile;
			ELSE
				SET messageSender = Environment.Variables.TXTResult1[1].SenderID;
				SET emailId = Environment.Variables.TXTResult7[1].Email_id;
				SET mobileNumber = Environment.Variables.TXTResult7[1].Mobile;
			END IF;

			SET OutputRoot.XMLNSC.PCS_Audit.Header.MS_REF_NO = Environment.variables.txnID;
			DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Header;
			SET headerRef.MSG_UID = UUIDASCHAR;
			IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
				SET headerRef.MSG_TYPE = 'CARTRQ_XML_OUT';
			ELSE
				SET headerRef.MSG_TYPE = 'CARTRQ_TEXT_OUT';
			END IF;
			SET headerRef.EVENT_NAME = 'Generation';
			SET headerRef.MSG_TIME = ediStartTime;
			SET headerRef.MSG_SNDR = messageSender;
			SET headerRef.PORT_CODE = SUBSTRING( Environment.variables.fileDirectory AFTER 'PORTS/');
			SET headerRef.PORT_CODE = SUBSTRING(headerRef.PORT_CODE BEFORE '/');
			SET OutputRoot.XMLNSC.PCS_Audit.Details.Message.EDI_START_TS = ediStartTime;
			DECLARE messageRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Message;
			SET messageRef.EDI_END_TS = ediEndTime;
			SET messageRef.FILE_NAME = Environment.variables.fileName;
			SET messageRef.EDI_DIRECTORY_INFO = Environment.variables.fileDirectory;

			SET OutputRoot.XMLNSC.PCS_Audit.Details.Email.MAIL_START_TS = mailStartTime;
			DECLARE emailRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Email;
			SET emailRef.MAILING_ID = 'NA';
			SET emailRef.MAIL_NOTIFICATION_STATUS = 'NotSent';
			SET emailRef.MAIL_END_TS = mailEndTime;

			SET OutputRoot.XMLNSC.PCS_Audit.Details.SMS.SMS_START_TS = SMSStartTime;
			DECLARE smsRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.SMS;
			SET smsRef.SMS_NOTIFICATION_NO = 'NA';
			SET smsRef.SMS_NOTIFICATION_STATUS = 'NotSent';

			SET OutputRoot.XMLNSC.PCS_Audit.Details.Database.DB_SP_START_TS = dbStartTime;
			DECLARE databaseRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Database;
			SET databaseRef.DB_SP_END_TS = dbEndTime;
			SET databaseRef.DB_SP_STATUS = 'S';
			SET databaseRef.DB_SP_REMARK = 'Executed successfully';

			DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
			DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
			CALL EDI_InsIIBAudit(outputChar);
			COMMIT;
		
		RETURN TRUE;
	END;
	CREATE PROCEDURE EDI_InsIIBAudit( IN auditXML CHARACTER)LANGUAGE DATABASE DYNAMIC RESULT SETS 0 EXTERNAL NAME "dbo.EDI_InsIIBAudit";

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;