

BROKER SCHEMA gen

CREATE COMPUTE MODULE PCS_CONTAINER_API_routeMessage_JSONToXML_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE incField CHARACTER;
		DECLARE bF BLOB;
		SET Environment.Variables.reqtime = CAST(CURRENT_TIMESTAMP AS CHARACTER CCSID 1208);
		SET Environment.Variables.reqtime = SUBSTRING(Environment.Variables.reqtime AFTER 'TIMESTAMP');
		SET incField = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 1208);
		
		SET Environment.variables.channelId = SUBSTRING(incField AFTER '"Channel_ID"');
		SET Environment.variables.channelId = SUBSTRING(Environment.variables.channelId AFTER '"');
		SET Environment.variables.channelId = SUBSTRING(Environment.variables.channelId BEFORE '"');
		
		SET Environment.variables.requestId = SUBSTRING(incField AFTER '"Request_ID"');
		SET Environment.variables.requestId = SUBSTRING(Environment.variables.requestId AFTER '"');
		SET Environment.variables.requestId = SUBSTRING(Environment.variables.requestId BEFORE '"');
		
		SET Environment.variables.serviceId = SUBSTRING(incField AFTER '"Service_ID"');
		SET Environment.variables.serviceId = SUBSTRING(Environment.variables.serviceId AFTER '"');
		SET Environment.variables.serviceId = SUBSTRING(Environment.variables.serviceId BEFORE '"');
		
		IF (CONTAINS(incField,'?>')) THEN
			SET incField = SUBSTRING(incField AFTER '?>');
			SET incField = SUBSTRING(incField BEFORE '"');
		ELSE
			SET incField = SUBSTRING(incField AFTER '"XML":"');
			SET incField = SUBSTRING(incField BEFORE '"');
		END IF;
		SET Environment.Variables.InXml = incField;
		DECLARE charPosDocTypeStart INTEGER POSITION('<DocumentType>' IN incField);
		DECLARE charPosDocTypeEnd INTEGER POSITION('</DocumentType>' IN incField);
		DECLARE docTypeLength INTEGER charPosDocTypeEnd - charPosDocTypeStart;
		SET Environment.Variables.Doctype = SUBSTRING(incField FROM charPosDocTypeStart+14 FOR docTypeLength);
		SET Environment.Variables.Doctype = SUBSTRING(Environment.Variables.Doctype BEFORE '<');
		
		DECLARE charPosCommonRefStart INTEGER POSITION('<CommonRefNumber>' IN incField);
		DECLARE charPosCommonRefEnd INTEGER POSITION('</CommonRefNumber>' IN incField);
		DECLARE commonRefLength INTEGER charPosCommonRefEnd - charPosCommonRefStart;
		SET Environment.variables.commonRefNo = SUBSTRING(incField FROM charPosCommonRefStart+17 FOR commonRefLength);
		SET Environment.variables.commonRefNo = SUBSTRING(Environment.variables.commonRefNo BEFORE '<');

		DECLARE charPosssendStart INTEGER POSITION('<SenderID>' IN incField);
		DECLARE charPosssendEnd INTEGER POSITION('</SenderID>' IN incField);
		DECLARE sendidLength INTEGER charPosssendEnd - charPosssendStart;
		SET Environment.Variables.senderid = SUBSTRING(incField FROM charPosssendStart+10 FOR sendidLength);
		SET Environment.Variables.senderid = SUBSTRING(Environment.Variables.senderid BEFORE '<');
		
		DECLARE charPosPortCodeStart INTEGER POSITION('<PortCode>' IN incField);
		DECLARE charPosPortCodeEnd INTEGER POSITION('</PortCode>' IN incField);
		DECLARE portCodeLength INTEGER charPosPortCodeEnd - charPosPortCodeStart;
		SET Environment.variables.portCode = SUBSTRING(incField FROM charPosPortCodeStart+10 FOR portCodeLength);
		SET Environment.variables.portCode = SUBSTRING(Environment.variables.portCode BEFORE '<');
		
		SET bF = CAST(incField AS BLOB CCSID 1208);
		DECLARE inCCSID INT InputProperties.CodedCharSetId;
		DECLARE inEncoding INT InputProperties.Encoding;
		CREATE LASTCHILD OF OutputLocalEnvironment DOMAIN('XMLNSC') PARSE(bF,inEncoding,inCCSID,'BLOB','XMLNSC');
		SET OutputRoot.XMLNSC = OutputLocalEnvironment.XMLNSC;
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE PCS_CONTAINER_API_routeMessage_JSONException_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE start REFERENCE TO InputExceptionList.*[<];
		DECLARE ErrorCode INTEGER;
		DECLARE ErrorText CHARACTER;
		DECLARE ErrDesc CHARACTER;
		IF (Environment.variables.exception1 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER001';
			SET OutputRoot.JSON.Data.Remarks = 'Container number value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF (Environment.variables.exception2 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER002';
			SET OutputRoot.JSON.Data.Remarks = 'Valid upto value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF (Environment.variables.exception3 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER003';
			SET OutputRoot.JSON.Data.Remarks = 'Container ISO Code value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF (Environment.variables.exception4 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER004';
			SET OutputRoot.JSON.Data.Remarks = 'Container Seal Number value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF (Environment.variables.exception5 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER005';
			SET OutputRoot.JSON.Data.Remarks = 'Number of packages value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSEIF (Environment.variables.exception6 = TRUE) THEN
			SET OutputRoot.JSON.Data.RespCde = 'ER006';
			SET OutputRoot.JSON.Data.Remarks = 'Package code value is required.';
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			WHILE lastmove(start) DO
				IF start.Number IS NOT NULL THEN
					SET ErrorCode = start.Number;
					SET ErrorText = start.Text;
				    SET ErrDesc = SUBSTRING(start.Insert[5].Text AFTER 'a: ');
				END IF;
				MOVE start LASTCHILD;
			END WHILE;

			CREATE FIELD OutputRoot.JSON.Data;
			DECLARE OM REFERENCE TO OutputRoot.JSON.Data;
			SET OM.Output.RespCde = ErrorCode;
			SET OM.Output.Remarks = ErrorText;
			PROPAGATE TO TERMINAL 'out1';
		END IF;
		
		SET OutputRoot.XMLNSC.errorDetails.messageFlowName = MessageFlowLabel;
		SET OutputRoot.XMLNSC.errorDetails.messageBody = InputRoot.XMLNSC;
		SET OutputRoot.XMLNSC.errorDetails.exceptionList = InputExceptionList;
		SET OutputRoot.XMLNSC.errorDetails.ErrorCode = ErrorCode;
		SET OutputRoot.XMLNSC.errorDetails.ErrorText = ErrorText;
		PROPAGATE TO TERMINAL 'out2';
		RETURN FALSE;
	END;
END MODULE;


CREATE COMPUTE MODULE PCS_CONTAINER_API_routeMessage_XMLException_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE start REFERENCE TO InputExceptionList.*[<];
		DECLARE ErrorCode INTEGER;
		DECLARE ErrorText,ErrorDesc CHARACTER;
--		WHILE (lastmove(start)) DO
--			IF (start.Number IS NOT NULL) THEN
--				SET ErrorCode = start.Number;
--				SET ErrorText = start.Text;
--				SET ErrorDesc = SUBSTRING(start.Insert[6].Text AFTER 'a: ');
--			END IF;
--			MOVE start LASTCHILD;
--		END WHILE;
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE OM REFERENCE TO OutputRoot.JSON.Data;
		SET OM.Output.RespCde = start.Number;
		SET OM.Output.Remarks = start.ParserException.ParserException.Insert[5].Text;--SUBSTRING(start.ParserException.ParserException.Insert[5].Text AFTER 'a: ');--ErrorDesc;
		PROPAGATE TO TERMINAL 'out2';

		SET OutputRoot.XMLNSC.errorDetails.messageFlowName = MessageFlowLabel;

		--IF (ErrorCode = 5025) THEN
			SET OutputRoot.XMLNSC.errorDetails.messageBody = Environment.Variables.InXml;
	--	ELSE
		--	SET OutputRoot.XMLNSC.errorDetails.messageBody = ErrorDesc;
		-- END IF;
		SET OutputRoot.XMLNSC.errorDetails.exceptionList = InputExceptionList;
		SET OutputRoot.XMLNSC.errorDetails.msRefNo = Environment.variables.commonRefNo;
		SET OutputRoot.XMLNSC.errorDetails.eventName = 'Consumption';
		SET OutputRoot.XMLNSC.errorDetails.portCode = Environment.variables.portCode;
		SET OutputRoot.XMLNSC.errorDetails.ErrorCode = start.Number;
		SET OutputRoot.XMLNSC.errorDetails.ErrorText = SUBSTRING(start.ParserException.ParserException.Insert[5].Text AFTER 'cvc-maxLength-valid:');

		PROPAGATE TO TERMINAL 'out1';

		DECLARE crlf CHAR CAST(CAST('X''0A''' AS BLOB) AS CHAR CCSID 1208);
		SET Environment.Subject ='Input Validation Error';
		SET Environment.MailTemplate = 'Please find the details of the Request Below:-'||crlf||
		'Error Details 	:'||COALESCE(ErrorDesc,'NA')||crlf||
		'Message ID 	:'||COALESCE(Environment.Variables.Doctype,'NA')||crlf||
		'Submission Date & Time 	:'||COALESCE(Environment.Variables.reqtime,'NA')||crlf||
		'Kindly review the request and send it.'||crlf||
		'Thanks & regards,'||crlf||
		'Team PCS';
		SET OutputRoot.JSON.Data.JMBNotification.EmailDetails.To='rajeshs@portall.in';
		SET OutputRoot.JSON.Data.JMBNotification.EmailDetails.From='rajeshs@portall.in';
		SET OutputRoot.JSON.Data.JMBNotification.EmailDetails.Subject = Environment.Subject;
		SET OutputRoot.JSON.Data.JMBNotification.EmailDetails.Template=Environment.MailTemplate;
		PROPAGATE TO TERMINAL 'out3';
		RETURN FALSE;
	END;
END MODULE;


CREATE COMPUTE MODULE PCS_CONTAINER_API_routeMessage_Route_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF(InputRoot.XMLNSC.ContainerDeliveryOrder.DocumentHeader.DocumentReference.DocumentType = 'AGDORD') THEN
			DECLARE typeOfOrder CHARACTER InputRoot.XMLNSC.ContainerDeliveryOrder.DocumentDetails.ContainerDOHeader.TypeOfDeliveryOrder;
			DECLARE recordType CHARACTER InputRoot.XMLNSC.ContainerDeliveryOrder.DocumentDetails.ContainerDOSummary.ContainerDODetails.RecordType;
			DECLARE inputRefDtls REFERENCE TO InputRoot.XMLNSC.ContainerDeliveryOrder.DocumentDetails.ContainerDOSummary.ContainerDODetails;
			DECLARE inputRefHdr REFERENCE TO InputRoot.XMLNSC.ContainerDeliveryOrder.DocumentDetails.ContainerDOHeader;
			IF (inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.ContainerNo) < 1) THEN
				SET Environment.variables.exception1 = TRUE;
				THROW EXCEPTION;
			ELSEIF(inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.ValidUpTo) < 1) THEN
				SET Environment.variables.exception2 = TRUE;
				THROW EXCEPTION;
			ELSEIF(inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.ContISOCode) < 1) THEN
				SET Environment.variables.exception3 = TRUE;
				THROW EXCEPTION;
			ELSEIF(inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.ContainerSealNumber) < 1) THEN
				SET Environment.variables.exception4 = TRUE;
				THROW EXCEPTION;
			ELSEIF(inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.NumberOfPackages) < 1) THEN
				SET Environment.variables.exception5 = TRUE;
				THROW EXCEPTION;
			ELSEIF(inputRefHdr.TypeOfDeliveryOrder = 'P' AND inputRefDtls.Containerised = 'Y' AND LENGTH(inputRefDtls.PackageCode) < 1) THEN
				SET Environment.variables.exception6 = TRUE;
				THROW EXCEPTION;
			ELSE
				SET OutputRoot.XMLNSC.agdord.payload = InputRoot.XMLNSC;
				SET OutputRoot.XMLNSC.agdord.requestId = Environment.variables.requestId;
				SET OutputRoot.XMLNSC.agdord.channelId = Environment.variables.channelId; 
				SET OutputRoot.XMLNSC.agdord.serviceId = Environment.variables.serviceId;
				SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'AGDORDCT.API.IN';
			END IF;			
		ELSEIF(InputRoot.XMLNSC.ContainerLoadPlan.DocumentHeader.DocumentReference.DocumentType = 'CLPMSG') THEN
			SET OutputRoot.XMLNSC.clpmsg.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.clpmsg.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.clpmsg.channelId = Environment.variables.channelId; 
			SET OutputRoot.XMLNSC.clpmsg.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CLPMSG.API.IN';
		ELSEIF(InputRoot.XMLNSC.ContLoadingNDischargeOder.DocumentHeader.DocumentReference.DocumentType = 'COARRI') THEN
			SET OutputRoot.XMLNSC.coarri.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.coarri.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.coarri.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.coarri.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'COARRI.IN';
		ELSEIF(InputRoot.XMLNSC.CODECODetails.DocumentHeader.DocumentReference.DocumentType = 'CODECO') THEN
			SET OutputRoot.XMLNSC.codeco.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.codeco.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.codeco.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.codeco.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CODECO.IN';
		ELSEIF(InputRoot.XMLNSC.EICREPDetails.DocumentHeader.DocumentReference.DocumentType = 'EICREP') THEN
			SET OutputRoot.XMLNSC.eicrep.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.eicrep.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.eicrep.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.eicrep.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'EICREP.IN';
		ELSEIF(InputRoot.XMLNSC.ContainerStockreportDetails.DocumentHeader.DocumentReference.DocumentType = 'COEDOR') THEN
			SET OutputRoot.XMLNSC.coedor.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.coedor.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.coedor.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.coedor.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'COEDOR.IN';
		ELSEIF(InputRoot.XMLNSC.ContStuffing.DocumentHeader.DocumentReference.DocumentType = 'COSTCO') THEN
			SET OutputRoot.XMLNSC.costco.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.costco.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.costco.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.costco.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'COSTCO.IN';
		ELSEIF(InputRoot.XMLNSC.ConfirmForCarting.DocumentHeader.DocumentReference.DocumentType = 'CARCFN') THEN
			SET OutputRoot.XMLNSC.carcfn.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.carcfn.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.carcfn.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.carcfn.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CARCFN.IN';
        ELSEIF(InputRoot.XMLNSC.AdvContainerList.DocumentHeader.DocumentReference.DocumentType = 'COPRAR') THEN
			SET OutputRoot.XMLNSC.coprar.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.coprar.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.coprar.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.coprar.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'COPRAR.API.IN'; 
	 	ELSEIF(InputRoot.XMLNSC.ConfirmationContainerPriority.DocumentHeader.DocumentReference.DocumentType = 'CNFCNP') THEN
			SET OutputRoot.XMLNSC.cnfcnp.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.cnfcnp.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.cnfcnp.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.cnfcnp.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CNFCNP.IN';
		ELSEIF(InputRoot.XMLNSC.ConfirmationContainerWeighment.DocumentHeader.DocumentReference.DocumentType = 'CNFCNW') THEN
			SET OutputRoot.XMLNSC.cnfcnw.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.cnfcnw.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.cnfcnw.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.cnfcnw.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CNFCNW.IN';
		ELSEIF(InputRoot.XMLNSC.ConfirmationContainerGrounding.DocumentHeader.DocumentReference.DocumentType = 'CNFCNG') THEN
			SET OutputRoot.XMLNSC.cnfcng.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.cnfcng.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.cnfcng.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.cnfcng.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CNFCNG.IN'; 
		ELSEIF(InputRoot.XMLNSC.GateTransactionsContainer.DocumentHeader.DocumentReference.DocumentType = 'GATRCE') THEN
			SET OutputRoot.XMLNSC.gatrce.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.gatrce.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.gatrce.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.gatrce.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'GATRCE.IN'; 
		ELSEIF(InputRoot.XMLNSC.GateTransactionsContainer.DocumentHeader.DocumentReference.DocumentType = 'GATRCI') THEN
			SET OutputRoot.XMLNSC.gatrci.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.gatrci.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.gatrci.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.gatrci.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'GATRCI.IN';
		ELSEIF(InputRoot.XMLNSC.CartingReceiptRes.DocumentHeader.DocumentReference.DocumentType = 'CGRREC') THEN
			SET OutputRoot.XMLNSC.cgrrec.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.cgrrec.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.cgrrec.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.cgrrec.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CGRREC.IN';   
		ELSEIF(InputRoot.XMLNSC.ConfirmationSealCutting.DocumentHeader.DocumentReference.DocumentType = 'CNFSLC') THEN
			SET OutputRoot.XMLNSC.cnfslc.payload = InputRoot.XMLNSC;
			SET OutputRoot.XMLNSC.cnfslc.requestId = Environment.variables.requestId;
			SET OutputRoot.XMLNSC.cnfslc.channelId = Environment.variables.channelId;
			SET OutputRoot.XMLNSC.cnfslc.serviceId = Environment.variables.serviceId;
			SET OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[1].queueName = 'CNFSLC.IN';          
		END IF;
		PROPAGATE TO TERMINAL 'out2';
		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE OM REFERENCE TO OutputRoot.JSON.Data;
		SET OM.Output.RespCde = '1';
		SET OM.Output.Remarks = 'Your Request has been accepted';
		PROPAGATE TO TERMINAL 'out1';
		RETURN TRUE;
	END;
END MODULE;