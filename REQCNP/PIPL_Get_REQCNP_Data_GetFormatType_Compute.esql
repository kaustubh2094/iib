

CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_GetFormatType_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
BEGIN
		SET Environment.variables.ediStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDISTARTTIME;');
		SET Environment.variables.txnID = InputRoot.XMLNSC.PCS.Common_Ref;
		DECLARE MessageName CHARACTER InputRoot.XMLNSC.PCS.Action_In;
		DECLARE request BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
		DECLARE ReplaceCarriageReturn BLOB X'0d0a';			
		SET request = REPLACE(request, ReplaceCarriageReturn);
		SET Environment.variables.request = CAST(request AS CHARACTER CCSID 1208);
		SET Environment.variables.dbStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBSTARTTIME;');
--		CALL EDI_GetFormatTypeByRefAndMsg(Environment.variables.txnID,MessageName,Environment.Variables.Result[],Environment.Variables.Result56[]);		
	END;
		
--CREATE PROCEDURE EDI_GetFormatTypeByRefAndMsg( IN TransactionID CHARACTER,IN MessageName CHARACTER)
--LANGUAGE DATABASE
--DYNAMIC RESULT SETS 2
--EXTERNAL NAME "dbo.EDI_GetFormatTypeByRefAndMsg";
  END MODULE;





CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_xmlCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL EDI_XGetREQCNP(Environment.variables.txnID,Environment.Variables.result1[],Environment.Variables.result2[],Environment.Variables.result3[],Environment.Variables.result4[],Environment.Variables.result5[],Environment.Variables.result6[]);				
		SET Environment.variables.dbEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS DBENDTIME;');
		DECLARE i INTEGER 1;
		
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.DocumentType = Environment.Variables.result1[1].DocumentType;
--		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.DocumentName = Environment.Variables.result1[1].DocumentName;
--		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.DocumentNumber = Environment.Variables.result1[1].DocumentNumber;
-- 		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.CommonRefNumber = Environment.Variables.result1[1].CommonRefNumber;
-- 		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.MessageType = Environment.Variables.result1[1].MessageType;
-- 		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference.SenderID = Environment.Variables.result1[1].SenderID;

 
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentReference;
		SET headerRef.DocumentName = Environment.Variables.result1[1].DocumentName;
		SET headerRef.DocumentNumber = Environment.Variables.result1[1].DocumentNumber;
		SET headerRef.CommonRefNumber = Environment.Variables.result1[1].CommonRefNumber;
		SET headerRef.MessageType = Environment.Variables.result1[1].MessageType;
		SET headerRef.SenderID = Environment.Variables.result1[1].SenderID;
		SET headerRef.PortCode = Environment.Variables.result1[1].PortCode;
		
		DECLARE recPartyCardinality INTEGER CARDINALITY (Environment.Variables.result2[]);
		DECLARE notPartyCardinality INTEGER CARDINALITY (Environment.Variables.result3[]);
		WHILE (i <= recPartyCardinality) DO
			SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentExchangeDetails.ReceivingPartyDetails.ReceivingParty[i] = Environment.Variables.result2[i].ReceivingParty;
			SET i = i + 1;
		END WHILE;
			 SET i = 1;
			 WHILE (i <= notPartyCardinality) DO
			 SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentHeader.DocumentExchangeDetails.NotifyPartyDetails.NotifyParty[i] = Environment.Variables.result3[i].NotifyParty;
			 SET i = i + 1;
			 END WHILE;
		
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.RecordType = Environment.Variables.result1[1].RecordType;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.RequestType = Environment.Variables.result1[1].RequestType;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.IGMNo = Environment.Variables.result1[1].IGMNo;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.LineNo = Environment.Variables.result1[1].LineNo;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.IGMDate = Environment.Variables.result1[1].IGMDate;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.BLNo = Environment.Variables.result1[1].BLNo;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.BLDate = Environment.Variables.result1[1].BLDate;
		
--		IF Environment.Variables.result1[1].PortofDischargeCode <> '0' THEN
--		SET OutputRoot.XMLNSC.GroundingRequest.DocumentDetails.GroundingDetails.PortofDischargeCode = Environment.Variables.result1[1].PortofDischargeCode;
--		END IF;
		
--		IF LENGTH(COALESCE(Environment.Variables.result1[1].ServiceCategory,'')) > 0 THEN
--			SET OutputRoot.XMLNSC.PaymentStatus.DocumentDetails.PaymentStatusDetails.ServiceCategory = Environment.Variables.result1[1].ServiceCategory;
--		END IF;
		
		IF LENGTH(COALESCE(Environment.Variables.result1[1].PortofDischargeCode,'')) > 0 THEN
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.PriorityMovementDetails.PortofDischargeCode = Environment.Variables.result1[1].PortofDischargeCode;
		END IF;
		
		
		
		DECLARE j INTEGER 1;
		DECLARE containerDetails INTEGER CARDINALITY (Environment.Variables.result4[]);		
		WHILE (j <= containerDetails) DO
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.ContainerSummary.ContainerDetails[j].ContainerNo = Environment.Variables.result4[j].ContainerNo;
	--	DECLARE containerDetails REFERENCE TO OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.ContainerSummary.ContainerDetails;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.ContainerSummary.ContainerDetails[j].ISOCodeForContainer = Environment.Variables.result4[j].ISOCodeForContainer;
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentDetails.ContainerSummary.ContainerDetails[j].ContainerType = Environment.Variables.result4[j].ContainerType;
		
		SET j = j + 1;
		END WHILE;
		
		SET OutputRoot.XMLNSC.PriorityMovementRequest.DocumentSummary.IssuedDateTime = Environment.Variables.result5[1].IssuedDateTime;
			
		
	END;

CREATE PROCEDURE EDI_XGetREQCNP( IN TransactionID CHARACTER)
LANGUAGE DATABASE
DYNAMIC RESULT SETS 6
EXTERNAL NAME "dbo.EDI_XGetREQCNP";
END MODULE;





CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_textCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;




CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_fileCreation_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE reqcnpapi,crefno CHARACTER;
		IF (CONTAINS(Environment.Variables.result2.SFTP_PATH,'http')) THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
			DECLARE ReplaceCarriageReturn BLOB X'0d0a';
			
			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
--			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);	
--			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
--			DECLARE stringOut BLOB;
--			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);
--		
--			SET OutputRoot.BLOB.BLOB = stringOut;
			SET Environment.APICALL = TRUE;
--			SET reqcnpapi = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 1208);
			CREATE FIELD OutputRoot.XMLNSC.data;
			SET OutputRoot.XMLNSC.data.payload = Environment.Variables.charData;
			SET OutputRoot.XMLNSC.data.url = Environment.Variables.result2.SFTP_PATH;
			SET OutputRoot.XMLNSC.data.comref = Environment.Variables.result1.CommonRefNumber;
			SET OutputRoot.XMLNSC.data.siteid = Environment.Variables.result1.SenderID;
			PROPAGATE TO TERMINAL 'out1';
			RETURN FALSE;
		ELSEIF (EXISTS(InputRoot.XMLNSC[]))THEN
			DECLARE outputBlob BLOB ASBITSTREAM(InputRoot.XMLNSC, 549,1208);
			DECLARE ReplaceCarriageReturn BLOB X'0d0a';
			
			SET outputBlob = REPLACE(outputBlob, ReplaceCarriageReturn);
			SET Environment.Variables.charData = CAST(outputBlob AS CHARACTER CCSID 1208);
			SET OutputRoot.XMLNSC = xmlBeautify(Environment.Variables.charData);	
			SET OutputRoot.XMLNSC.root = SUBSTRING(OutputRoot.XMLNSC AFTER '?>');
			DECLARE stringOut BLOB;
			SET stringOut = CAST(OutputRoot.XMLNSC.root as BLOB CCSID 1208);
		
			SET OutputRoot.BLOB.BLOB = stringOut;
			SET OutputLocalEnvironment.Destination.File.Name = 'REQCNP' || Environment.variables.txnID || '.xml';			
			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.result2[1].SFTP_PATH;
--		ELSEIF (EXISTS(InputRoot.DFDL[])) THEN	
--			SET OutputRoot.Properties.MessageType ='{}:TPRORD';
--			SET OutputRoot.Properties.MessageSet ='{JMB_DFDL}';
--			SET OutputRoot.Properties.ReplyProtocol = 'FILE';	
--			SET OutputRoot.DFDL.TPRORD = InputRoot.DFDL.TPRORD;
--			SET OutputLocalEnvironment.Destination.File.Name = 'TPRORD' || Environment.variables.txnID || '.txt';
--			SET OutputLocalEnvironment.Destination.File.Remote.ServerDirectory = Environment.Variables.TXTResult2[1].SFTP_PATH;
--	--	END IF;
		
		SET Environment.variables.fileName = OutputLocalEnvironment.Destination.File.Name;
		SET Environment.variables.fileDirectory = OutputLocalEnvironment.Destination.File.Remote.ServerDirectory;

		END IF;


	END;
CREATE PROCEDURE xmlBeautify( IN unformattedXML CHARACTER)
RETURNS CHARACTER
LANGUAGE JAVA
EXTERNAL NAME "com.portall.xmlBeautify.XmlBeautifier.prettyFormat";
END MODULE;





CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_mailSMSCall_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.variables.mailStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILSTARTTIME;');
		SET Environment.variables.mailEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS MAILENDTIME;');
		SET Environment.variables.SMSStartTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS SMSSTARTTIME;');
	END;
END MODULE;



CREATE COMPUTE MODULE PIPL_Get_REQCNP_Data_auditDetails_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
		BEGIN
		SET Environment.variables.ediEndTime = PASSTHRU('SELECT CURRENT_TIMESTAMP AS EDIENDTIME;');
		DECLARE ediEndTime CHARACTER  CAST(Environment.variables.ediEndTime[1].EDIENDTIME AS CHARACTER);
		SET ediEndTime = REPLACE(ediEndTime,'TIMESTAMP ','');
	--	SET ediEndTime = SUBSTRING(mailStartTime BEFORE '.');
		SET ediEndTime = SUBSTRING(ediEndTime FROM 2 FOR 23);
		
		DECLARE ediStartTime CHARACTER  CAST(Environment.variables.ediStartTime[1].EDISTARTTIME AS CHARACTER);
		DECLARE mailStartTime CHARACTER  CAST(Environment.variables.mailStartTime[1].MAILSTARTTIME AS CHARACTER);
		DECLARE mailEndTime CHARACTER CAST(Environment.variables.mailEndTime[1].MAILENDTIME AS CHARACTER);
		DECLARE dbStartTime CHARACTER  CAST(Environment.variables.dbStartTime[1].DBSTARTTIME AS CHARACTER);
		DECLARE dbEndTime CHARACTER  CAST(Environment.variables.dbEndTime[1].DBENDTIME AS CHARACTER);
		DECLARE SMSStartTime CHARACTER  CAST(Environment.variables.SMSStartTime[1].SMSSTARTTIME AS CHARACTER);

		SET ediStartTime = REPLACE(ediStartTime,'TIMESTAMP ','');
		SET ediStartTime = SUBSTRING(ediStartTime FROM 2 FOR 23);

		SET mailStartTime = REPLACE(mailStartTime,'TIMESTAMP ','');
		SET mailStartTime = SUBSTRING(mailStartTime FROM 2 FOR 23);

		SET mailEndTime = REPLACE(mailEndTime,'TIMESTAMP ','');
		SET mailEndTime = SUBSTRING(mailEndTime FROM 2 FOR 23);

		SET SMSStartTime = REPLACE(SMSStartTime,'TIMESTAMP ','');
		SET SMSStartTime = SUBSTRING(SMSStartTime FROM 2 FOR 23);

		SET dbStartTime = REPLACE(dbStartTime,'TIMESTAMP ','');
		SET dbStartTime = SUBSTRING(dbStartTime FROM 2 FOR 23);

		SET dbEndTime = REPLACE(dbEndTime,'TIMESTAMP ','');
		SET dbEndTime = SUBSTRING(dbEndTime FROM 2 FOR 23);
		
		DECLARE messageSender CHARACTER;
		DECLARE emailId CHARACTER;
		DECLARE mobileNumber CHARACTER;
	--	IF (Environment.Variables.result1.FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET messageSender = Environment.Variables.result1.SenderID;
			SET emailId = Environment.Variables.result1.Sender_Email_id;
			SET mobileNumber = Environment.Variables.result1.Sender_Mobile;
--		ELSE
--			SET messageSender = Environment.Variables.TXTResult1[1].SenderID;
--			SET emailId = Environment.Variables.TXTResult2[1].Email_id;
--			SET mobileNumber = Environment.Variables.TXTResult2[1].Mobile;
--		END IF;
		
		SET OutputRoot.XMLNSC.PCS_Audit.Header.MS_REF_NO = Environment.variables.txnID;
		DECLARE headerRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Header;
		SET headerRef.MSG_UID = UUIDASCHAR;
		IF (Environment.Variables.Result[1].FileFormat = 'XML' OR Environment.Variables.Result56[1].FileFormat = 'XML') THEN
			SET headerRef.MSG_TYPE = 'REQCNP_XML_OUT';
		ELSE
			SET headerRef.MSG_TYPE = 'REQCNP_XML_OUT';
		END IF;
		SET headerRef.MSG_TIME = ediStartTime;
		SET headerRef.MSG_SNDR = messageSender;
		SET headerRef.PORT_CODE = SUBSTRING( Environment.variables.fileDirectory AFTER 'PORTS/');
		SET headerRef.PORT_CODE = SUBSTRING(headerRef.PORT_CODE BEFORE '/');
		SET headerRef.EVENT_NAME = 'Generation';
		
		SET OutputRoot.XMLNSC.PCS_Audit.Details.Message.EDI_START_TS = ediStartTime;
		DECLARE messageRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Message;
		SET messageRef.EDI_END_TS = ediEndTime;
		SET messageRef.FILE_NAME = Environment.variables.fileName;
		SET messageRef.EDI_DIRECTORY_INFO = Environment.variables.fileDirectory;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Email.MAIL_START_TS = mailStartTime;
		DECLARE emailRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Email;
		SET emailRef.MAILING_ID = 'NA';
		SET emailRef.MAIL_NOTIFICATION_STATUS = 'Not Sent';
		SET emailRef.MAIL_END_TS = mailEndTime;

		SET OutputRoot.XMLNSC.PCS_Audit.Details.SMS.SMS_START_TS = SMSStartTime;
		DECLARE smsRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.SMS;
		SET smsRef.SMS_NOTIFICATION_NO = 'NA';
		SET smsRef.SMS_NOTIFICATION_STATUS = 'Not Sent';

		SET OutputRoot.XMLNSC.PCS_Audit.Details.Database.DB_SP_START_TS = dbStartTime;
		DECLARE databaseRef REFERENCE TO OutputRoot.XMLNSC.PCS_Audit.Details.Database;
		SET databaseRef.DB_SP_END_TS = dbEndTime;
		SET databaseRef.DB_SP_STATUS = 'S';
		SET databaseRef.DB_SP_REMARK = 'Executed successfully';
		
		DECLARE outputBlob BLOB ASBITSTREAM(OutputRoot.XMLNSC, 549,1208);
		DECLARE outputChar CHARACTER CAST(outputBlob AS CHARACTER CCSID 1208);
		CALL EDI_InsIIBAudit(outputChar);
		COMMIT;
	END;
	CREATE PROCEDURE EDI_InsIIBAudit( IN auditXML CHARACTER)
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 0
	EXTERNAL NAME "dbo.EDI_InsIIBAudit";
END MODULE;